import requests
import numpy as np
from numpy.typing import NDArray
from pathlib import Path
from datetime import datetime, timedelta
import gzip
import shutil
from dataclasses import dataclass
import logging
import h5py
import tempfile
import json

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ coordinates
try:
    from coordinates import satellite_xyz
    COORDINATES_AVAILABLE = True
except ImportError:
    COORDINATES_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
RE = 6378000.0
TIME_STEP_SECONDS = 30
HEIGHT_OF_THIN_IONOSPHERE = 300000

# --- GNSS —Å–ø—É—Ç–Ω–∏–∫–∏ ---
GNSS_SATS = []
GNSS_SATS.extend(['G' + str(i).zfill(2) for i in range(1, 33)])
GNSS_SATS.extend(['R' + str(i).zfill(2) for i in range(1, 25)])
GNSS_SATS.extend(['E' + str(i).zfill(2) for i in range(1, 37)])
GNSS_SATS.extend(['C' + str(i).zfill(2) for i in range(1, 41)])

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ---
def load_nav_file(epoch: datetime, tempdir: str = "./") -> Path:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç nav-—Ñ–∞–π–ª —Å SIMuRG –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    
    Args:
        epoch: –¥–∞—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ nav-—Ñ–∞–π–ª–∞
        tempdir: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    
    Returns:
        Path: –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É nav-—Ñ–∞–π–ª—É
    """
    try:
        yday = str(epoch.timetuple().tm_yday).zfill(3)
        file_name = f"BRDC00IGS_R_{epoch.year}{yday}0000_01D_MN.rnx"
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ URL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ª–µ—Ç
        possible_urls = [
            f"https://simurg.space/files2/{epoch.year}/{yday}/nav/{file_name}.gz",
            f"https://simurg.space/files/{epoch.year}/{yday}/nav/{file_name}.gz"
        ]
        
        gziped_file = Path(tempdir) / (file_name + ".gz")
        local_file = Path(tempdir) / file_name
        
        print(f"üì° –ó–∞–≥—Ä—É–∑–∫–∞ nav-—Ñ–∞–π–ª–∞ –¥–ª—è {epoch.strftime('%Y-%m-%d')} (–¥–µ–Ω—å {yday})")
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        for i, url in enumerate(possible_urls):
            try:
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {i+1}: {url}")
                response = requests.get(url, stream=True, timeout=30)
                
                if response.status_code == 200:
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω nav-—Ñ–∞–π–ª —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {i+1}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    with open(gziped_file, "wb") as f:
                        for chunk in response.iter_content(chunk_size=8192):
                            f.write(chunk)
                    
                    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º gzip —Ñ–∞–π–ª
                    print(f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ {gziped_file.name}")
                    with gzip.open(gziped_file, 'rb') as f_in:
                        with open(local_file, 'wb') as f_out:
                            shutil.copyfileobj(f_in, f_out)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    file_size = local_file.stat().st_size
                    if file_size > 1000:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä nav-—Ñ–∞–π–ª–∞
                        print(f"‚úÖ Nav-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {local_file} ({file_size} –±–∞–π—Ç)")
                        return local_file
                    else:
                        print(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç), –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                        continue
                        
                elif response.status_code == 404:
                    print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (404): {url}")
                    continue
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status_code}: {url}")
                    continue
                    
            except requests.exceptions.Timeout:
                print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {i+1}")
                continue
            except requests.exceptions.ConnectionError:
                print(f"üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É {i+1}")
                continue
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {i+1}: {e}")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å nav-—Ñ–∞–π–ª –¥–ª—è –¥–∞—Ç—ã {epoch.strftime('%Y-%m-%d')} –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ nav-—Ñ–∞–π–ª–∞: {e}")
        raise

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤ ---
def get_sat_xyz(nav_file: Path, start: datetime, end: datetime, sats: list = GNSS_SATS, timestep: int = TIME_STEP_SECONDS):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    
    Args:
        nav_file: –ø—É—Ç—å –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        start: –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        end: –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è
        sats: —Å–ø–∏—Å–æ–∫ —Å–ø—É—Ç–Ω–∏–∫–æ–≤
        timestep: –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Returns:
        tuple: (—Å–ª–æ–≤–∞—Ä—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤, —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω)
    """
    if not COORDINATES_AVAILABLE:
        print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ coordinates –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install git+https://github.com/gnss-lab/coordinates.git#egg=coordinates")
        return {}, []
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ nav-—Ñ–∞–π–ª–∞
        if not nav_file.exists():
            print(f"‚ùå Nav-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {nav_file}")
            return {}, []
        
        file_size = nav_file.stat().st_size
        print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ nav-—Ñ–∞–π–ª–∞: {nav_file} ({file_size} –±–∞–π—Ç)")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        times = []
        current_time = start
        while current_time <= end:
            times.append(current_time)
            current_time += timedelta(seconds=timestep)
        
        print(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {len(times)} —Ç–æ—á–µ–∫ —Å {start} –¥–æ {end}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤
        sats_xyz = {}
        successful_sats = 0
        
        for sat_idx, sat in enumerate(sats):
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if sat_idx % 10 == 0:
                    print(f"üõ∞Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø—É—Ç–Ω–∏–∫–∞ {sat_idx+1}/{len(sats)}: {sat}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø—É—Ç–Ω–∏–∫–∞
                xyz_data = []
                valid_points = 0
                
                for t in times:
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ coordinates
                        # –§–æ—Ä–º–∞—Ç: satellite_xyz(nav_file_path, constellation, prn, epoch)
                        constellation = sat[0]  # G, R, E, C
                        prn = int(sat[1:])      # –Ω–æ–º–µ—Ä —Å–ø—É—Ç–Ω–∏–∫–∞
                        
                        xyz = satellite_xyz(str(nav_file), constellation, prn, t)
                        
                        if xyz is not None and len(xyz) == 3 and not all(x == 0 for x in xyz):
                            xyz_data.append(xyz)
                            valid_points += 1
                        else:
                            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—á–∫—É
                            xyz_data.append([0.0, 0.0, 0.0])
                            
                    except Exception as e:
                        # –ú–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ø–æ—Ö
                        xyz_data.append([0.0, 0.0, 0.0])
                        continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—É—Ç–Ω–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫
                if valid_points > len(times) * 0.1:  # –ú–∏–Ω–∏–º—É–º 10% –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫
                    sats_xyz[sat] = np.array(xyz_data)
                    successful_sats += 1
                    if sat_idx < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤
                        print(f"  ‚úÖ {sat}: {valid_points}/{len(times)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫")
                
            except Exception as e:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø—É—Ç–Ω–∏–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏
                if sat_idx < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤
                    print(f"  ‚ùå {sat}: –æ—à–∏–±–∫–∞ - {str(e)[:50]}")
                continue
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful_sats} —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –∏–∑ {len(sats)}")
        
        if successful_sats == 0:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ø—É—Ç–Ω–∏–∫–∞")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - Nav-—Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π")
            print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π coordinates")
        
        return sats_xyz, times
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_sat_xyz: {e}")
        return {}, []

# --- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ XYZ –≤ —ç–ª–µ–≤–µ–π—à–Ω/–∞–∑–∏–º—É—Ç ---
def xyz_to_el_az(xyz_site: tuple, xyz_sat: NDArray, earth_radius=RE):
    def cartesian_to_latlon(x, y, z, earth_radius=earth_radius):
        r = np.sqrt(x ** 2 + y ** 2 + z ** 2)
        lon = np.arctan2(y, x)
        lat = np.arcsin(z / r)
        return lat, lon, r - earth_radius

    (x_0, y_0, z_0) = xyz_site
    (x_s, y_s, z_s) = xyz_sat[:, 0], xyz_sat[:, 1], xyz_sat[:, 2]
    (b_0, l_0, h_0) = cartesian_to_latlon(*xyz_site)
    (b_s, l_s, h_s) = cartesian_to_latlon(x_s, y_s, z_s)
    r_k = np.sqrt(x_s ** 2 + y_s ** 2 + z_s ** 2)
    sigma = np.arctan2(
        np.sqrt(1 - (np.sin(b_0) * np.sin(b_s) + np.cos(b_0) * np.cos(b_s) * np.cos(l_s - l_0)) ** 2),
        (np.sin(b_0) * np.sin(b_s) + np.cos(b_0) * np.cos(b_s) * np.cos(l_s - l_0))
    )
    x_t = -(x_s - x_0) * np.sin(l_0) + (y_s - y_0) * np.cos(l_0)
    y_t = (
        -1 * (x_s - x_0) * np.cos(l_0) * np.sin(b_0) -
        (y_s - y_0) * np.sin(l_0) * np.sin(b_0) +
        (z_s - z_0) * np.cos(b_0)
    )
    el = np.arctan2((np.cos(sigma) - earth_radius / r_k), np.sin(sigma))
    az = np.arctan2(x_t, y_t)
    az = np.where(az < 0, az + 2 * np.pi, az)
    return np.concatenate([[el], [az]]).T

def get_sat_elevation_azimuth(site_location_xyz: tuple, sats_xyz: dict):
    elaz = {}
    for sat, sat_xyz in sats_xyz.items():
        elaz[sat] = xyz_to_el_az(site_location_xyz, sat_xyz)
    return elaz

# --- –†–∞—Å—á—ë—Ç SIP ---
def calculate_sips(site_lat, site_lon, elevation, azimuth, ionospheric_height=HEIGHT_OF_THIN_IONOSPHERE, earth_radius=RE):
    psi = (
        (np.pi / 2 - elevation) -
        np.arcsin(np.cos(elevation) * earth_radius / (earth_radius + ionospheric_height))
    )
    lat = np.arcsin(
        np.sin(site_lat) * np.cos(psi) +
        np.cos(site_lat) * np.sin(psi) * np.cos(azimuth)
    )
    lon = site_lon + np.arcsin(np.sin(psi) * np.sin(azimuth) / np.cos(site_lat))
    lon = np.where(lon > np.pi, lon - 2 * np.pi, lon)
    lon = np.where(lon < -np.pi, lon + 2 * np.pi, lon)
    return np.concatenate([[np.degrees(lat)], [np.degrees(lon)]]).T

def get_sat_sips(site_latlon: tuple, sats_elaz: dict):
    sip_latlon = {}
    site_lat, site_lon = site_latlon
    for sat, elaz in sats_elaz.items():
        sips = calculate_sips(np.radians(site_lat), np.radians(site_lon), elaz[:, 0], elaz[:, 1])
        sip_latlon[sat] = sips
    return sip_latlon

# --- Great circle distance ---
def calculate_great_circle_distance(late, lone, latp, lonp, radius=RE):
    lone = np.where(lone < 0, lone + 2 * np.pi, lone)
    lonp = np.where(lonp < 0, lonp + 2 * np.pi, lonp)
    dlon = lonp - lone
    inds = np.where((dlon > 0) & (dlon > np.pi))
    dlon[inds] = 2 * np.pi - dlon[inds]
    dlon = np.where((dlon < 0) & (dlon < -np.pi), dlon + 2 * np.pi, dlon)
    dlon = np.where((dlon < 0) & (dlon < -np.pi), -dlon, dlon)
    cosgamma = np.sin(late) * np.sin(latp) + np.cos(late) * np.cos(latp) * np.cos(dlon)
    return radius * np.arccos(cosgamma)

def get_event_sat_gcd(event_latlon: tuple, sat_sips_latlon: dict):
    sat_event_gcd = {}
    event_lat, event_lon = event_latlon
    for sat, sip_latlon in sat_sips_latlon.items():
        elat_array = np.full_like(sip_latlon[:, 0], event_lat)
        elon_array = np.full_like(sip_latlon[:, 0], event_lon)
        gcd = calculate_great_circle_distance(
            np.radians(elat_array), np.radians(elon_array),
            np.radians(sip_latlon[:, 0]), np.radians(sip_latlon[:, 1])
        )
        sat_event_gcd[sat] = gcd
    return sat_event_gcd

# --- –ú–∞—Å–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é ---
def calculte_sats_mask(sat_event_gcd: dict, max_distance: float):
    sat_mask = {}
    for sat, gcd in sat_event_gcd.items():
        mask = np.where(gcd < max_distance)[0]
        sat_mask[sat] = mask
    return sat_mask

@dataclass
class PointOfInterest:
    site: str
    sat: str
    time: datetime
    distance: float
    latitude: float
    longitude: float
    height: float

def get_point_of_interest(site: str, height: float, sat_mask: dict, times: list, sat_event_gcd: dict, sat_sips: dict):
    points = {}
    for sat, mask in sat_mask.items():
        points[sat] = []
        for i in mask:
            sip_lat = sat_sips[sat][i, 0]
            sip_lon = sat_sips[sat][i, 1]
            point = PointOfInterest(site, sat, times[i], sat_event_gcd[sat][i], sip_lat, sip_lon, height)
            points[sat].append(point)
    return points

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Å—Ç–∞–Ω—Ü–∏–π ---

def get_all_stations(limit=15000):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö GNSS —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ API simurg.space
    
    Args:
        limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15000)
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (station_id, lat, lon) –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π
        response = requests.get("https://api.simurg.space/sites/", timeout=30)
        response.raise_for_status()
        
        all_stations_data = response.json()
        total_stations = len(all_stations_data)
        
        # –ë–µ—Ä–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –ª–∏–º–∏—Ç
        max_stations = min(limit, total_stations)
        step = max(1, total_stations // max_stations)
        
        stations = []
        processed = 0
        valid_stations = 0
        error_stations = 0
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å—Ç–∞–Ω—Ü–∏–π
        for i in range(0, total_stations, step):
            if len(stations) >= max_stations:
                break
                
            station_id = all_stations_data[i]
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å—Ç–∞–Ω—Ü–∏–∏
                station_url = f"https://api.simurg.space/sites/{station_id}"
                station_response = requests.get(station_url, timeout=10)
                station_response.raise_for_status()
                
                station_data = station_response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                if 'location' in station_data and 'lat' in station_data['location'] and 'lon' in station_data['location']:
                    lat = float(station_data['location']['lat'])
                    lon = float(station_data['location']['lon'])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    if -90 <= lat <= 90 and -180 <= lon <= 180:
                        stations.append((station_id, lat, lon))
                        valid_stations += 1
                    else:
                        error_stations += 1
                else:
                    error_stations += 1
                    
            except Exception as e:
                error_stations += 1
                continue
            
            processed += 1
        
        return stations
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π: {e}")
        return []
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–Ω—Ü–∏–π: {e}")
        return []

def find_stations_in_polygon(polygon_points):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
    
    Args:
        polygon_points (list): –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –ø–æ–ª–∏–≥–æ–Ω–∞ [(lat, lon), ...]
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å—Ç–∞–Ω—Ü–∏–π –≤ –ø–æ–ª–∏–≥–æ–Ω–µ {station_id: {'lat': lat, 'lon': lon, 'name': name, 'height': height}}
    """
    print(f"üîç –ü–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–π –≤ –ø–æ–ª–∏–≥–æ–Ω–µ —Å {len(polygon_points)} —Ç–æ—á–∫–∞–º–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
    all_stations_list = get_all_stations(limit=200)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    
    if not all_stations_list:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π")
        return {}
    
    print(f"üìä –ü—Ä–æ–≤–µ—Ä—è—é {len(all_stations_list)} —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –ø–æ–ª–∏–≥–æ–Ω...")
    
    stations_in_polygon = {}
    
    for station_id, lat, lon in all_stations_list:
        if is_point_in_polygon(lat, lon, polygon_points):
            stations_in_polygon[station_id.lower()] = {
                'lat': lat,
                'lon': lon,
                'name': station_id.upper(),
                'height': 0.0  # –í—ã—Å–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            }
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(stations_in_polygon)} —Å—Ç–∞–Ω—Ü–∏–π –≤ –ø–æ–ª–∏–≥–æ–Ω–µ")
    
    if stations_in_polygon:
        print("üìç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏:")
        for i, (station_id, station_info) in enumerate(list(stations_in_polygon.items())[:10]):
            print(f"  {i+1}. {station_id.upper()}: ({station_info['lat']:.2f}¬∞, {station_info['lon']:.2f}¬∞)")
        if len(stations_in_polygon) > 10:
            print(f"  ... –∏ –µ—â–µ {len(stations_in_polygon) - 10} —Å—Ç–∞–Ω—Ü–∏–π")
    
    return stations_in_polygon

def auto_download_nav_file_for_date(date):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç NAV —Ñ–∞–π–ª –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ API
    
    Args:
        date: datetime.date –æ–±—ä–µ–∫—Ç
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏—è—Ö
    """
    import tempfile
    from datetime import datetime
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º nav-—Ñ–∞–π–ª
            nav_file_path = load_nav_file(datetime.combine(date, datetime.min.time()), temp_dir)
            
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ API (—É–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π)
            stations_list = get_all_stations(limit=15000)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π
            
            if not stations_list:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ API")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            stations = {}
            for station_id, lat, lon in stations_list:
                stations[station_id.lower()] = {
                    'lat': lat,
                    'lon': lon,
                    'name': station_id.upper(),
                    'height': 0.0  # –í—ã—Å–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä NAV —Ñ–∞–π–ª–∞
            nav_file_size = nav_file_path.stat().st_size
            lines_processed = 0
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ NAV —Ñ–∞–π–ª–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            try:
                with open(nav_file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    lines_processed = sum(1 for _ in f)
            except:
                lines_processed = 0
            
            return {
                'success': True,
                'stations': stations,
                'file_path': str(nav_file_path),
                'file_size': nav_file_size,
                'date': date,
                'stations_count': len(stations),
                'lines_processed': lines_processed,
                'source': 'API + NAV_file'
            }
            
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {date}: {str(e)}"
        return {
            'success': False,
            'error': error_msg,
            'date': date,
            'stations': {},
            'suggestions': [
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
                '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞',
                f'NAV —Ñ–∞–π–ª –¥–ª—è {date} –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ SIMuRG',
                'API simurg.space –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É'
            ]
        }

def request_ionosphere_data(date, structure_type, polygon_points, station_code=None, preloaded_nav_info=None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç nav-—Ñ–∞–π–ª –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã, –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ,
    —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç SIP —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –ø–æ–ª–∏–≥–æ–Ω–æ–º.
    
    Args:
        date: datetime.date –æ–±—ä–µ–∫—Ç
        structure_type: —Ç–∏–ø —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏)
        polygon_points: —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –ø–æ–ª–∏–≥–æ–Ω–∞ [(lat, lon), ...]
        station_code: –∫–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ (–µ—Å–ª–∏ None, –∏—â–µ—Ç –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ)
        preloaded_nav_info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º nav-—Ñ–∞–π–ª–µ –∏–∑ session state
    
    Returns:
        dict: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å SIP —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if station_code:
        print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏: {station_code.upper()}")
        result = process_station_sips(station_code, date, polygon_points)
        
        if result['success']:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
            return {
                'points': result['trajectory_points'],
                'metadata': {
                    'stations_processed': 1,
                    'stations_with_intersections': 1 if result['intersection_points'] > 0 else 0,
                    'total_intersection_points': result['intersection_points'],
                    'satellites_processed': result['satellites_total'],
                    'satellites_with_intersections': result['satellites_with_intersections'],
                    'time_range': result['time_range'],
                    'polygon_points_count': result['polygon_points_count'],
                    'date': result['date'],
                    'source': 'single_station_processing',
                    'priority': 'HIGH',
                    'processed_stations': [{
                        'code': result['station']['code'],
                        'name': result['station']['name'],
                        'lat': result['station']['lat'],
                        'lon': result['station']['lon'],
                        'satellites_with_intersections': result['satellites_with_intersections'],
                        'intersection_points': result['intersection_points']
                    }]
                }
            }
        else:
            return {
                'points': [],
                'metadata': {
                    'error': result['error'],
                    'station': result['station'],
                    'date': str(date)
                }
            }
    
    # –ï—Å–ª–∏ —Å—Ç–∞–Ω—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ –ø–æ–ª–∏–≥–æ–Ω–µ
    import requests
    import gzip
    import io
    import tempfile
    from datetime import datetime, date as date_class, timedelta
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –≥–æ–¥ –∏–∑ –¥–∞—Ç—ã
    current_year = date.year
    day_of_year = date.timetuple().tm_yday
    
    print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {current_year} –≥–æ–¥–∞, –¥–µ–Ω—å: {day_of_year}")
    
    # –ò—â–µ–º –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ
    stations_to_process = find_stations_in_polygon(polygon_points)
    
    if not stations_to_process:
        return {
            'points': [],
            'metadata': {
                'error': '–í –ø–æ–ª–∏–≥–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏',
                'polygon_points_count': len(polygon_points),
                'date': str(date)
            }
        }
    
    print(f"üì° –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å—Ç–∞–Ω—Ü–∏–∏: {list(stations_to_process.keys())}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π nav-—Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
        if (preloaded_nav_info and 
            preloaded_nav_info.get('loaded') and 
            preloaded_nav_info.get('date') == date):
            
            print(f"üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π nav-—Ñ–∞–π–ª –¥–ª—è {date}")
            nav_file_path = preloaded_nav_info['path']
            temp_dir = preloaded_nav_info['temp_dir']
            print(f"‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {nav_file_path}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–≤–µ—Å—å –¥–µ–Ω—å)
            start_time = datetime.combine(date, datetime.min.time())
            end_time = datetime.combine(date, datetime.max.time().replace(microsecond=0))
            
            print(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {start_time} - {end_time}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ø—É—Ç–Ω–∏–∫–æ–≤
            print(f"üõ∞Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –∏–∑ nav-—Ñ–∞–π–ª–∞...")
            sats_xyz, times = get_sat_xyz(nav_file_path, start_time, end_time, GNSS_SATS, TIME_STEP_SECONDS)
            
        else:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º nav-—Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ
            print(f"üì° –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è {current_year}-{day_of_year:03d}...")
            with tempfile.TemporaryDirectory() as temp_dir:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é load_nav_file –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ nav-—Ñ–∞–π–ª–∞
                    nav_file_path = load_nav_file(datetime.combine(date, datetime.min.time()), temp_dir)
                    print(f"‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {nav_file_path}")
                except ValueError as e:
                    # –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ nav-—Ñ–∞–π–ª–∞
                    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å nav-—Ñ–∞–π–ª –¥–ª—è {date}: {str(e)}"
                    print(f"‚ùå {error_msg}")
                    return {
                        'points': [],
                        'metadata': {
                            'error': error_msg,
                            'date': str(date),
                            'year': current_year,
                            'day_of_year': day_of_year,
                            'suggestions': [
                                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
                                '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞',
                                f'Nav-—Ñ–∞–π–ª –¥–ª—è {date} –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ SIMuRG',
                                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É'
                            ]
                        }
                    }
                except Exception as e:
                    error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ nav-—Ñ–∞–π–ª–∞: {str(e)}"
                    print(f"‚ùå {error_msg}")
                    return {
                        'points': [],
                        'metadata': {
                            'error': error_msg,
                            'date': str(date)
                        }
                    }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–≤–µ—Å—å –¥–µ–Ω—å)
                start_time = datetime.combine(date, datetime.min.time())
                end_time = datetime.combine(date, datetime.max.time().replace(microsecond=0))
                
                print(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {start_time} - {end_time}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ø—É—Ç–Ω–∏–∫–æ–≤
                print(f"üõ∞Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –∏–∑ nav-—Ñ–∞–π–ª–∞...")
                sats_xyz, times = get_sat_xyz(nav_file_path, start_time, end_time, GNSS_SATS, TIME_STEP_SECONDS)
        
        if not sats_xyz:
            error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –∏–∑ nav-—Ñ–∞–π–ª–∞"
            print(f"‚ùå {error_msg}")
            return {
                'points': [],
                'metadata': {
                    'error': error_msg,
                    'date': str(date),
                    'nav_file': str(nav_file_path) if 'nav_file_path' in locals() else 'unknown',
                    'suggestions': [
                        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ coordinates —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
                        'Nav-—Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω',
                        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É',
                        '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ coordinates: pip install git+https://github.com/gnss-lab/coordinates.git'
                    ]
                }
            }
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {len(sats_xyz)} —Å–ø—É—Ç–Ω–∏–∫–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤
        valid_satellites = []
        for sat, xyz_data in sats_xyz.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ (–Ω–µ –Ω—É–ª–µ–≤—ã–µ) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            non_zero_points = np.count_nonzero(np.any(xyz_data != 0, axis=1))
            if non_zero_points > len(times) * 0.1:  # –ú–∏–Ω–∏–º—É–º 10% –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫
                valid_satellites.append(sat)
        
        print(f"üìä –°–ø—É—Ç–Ω–∏–∫–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö: {len(valid_satellites)}")
        
        if len(valid_satellites) < 4:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ú–∞–ª–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            print("üí° –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–∞ SIP —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞–Ω—Ü–∏—é
        all_result_points = []
        stations_processed = []
        total_intersections = 0
        
        for station_code, station in stations_to_process.items():
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}: {station['name']}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–∏
                if not all(key in station for key in ['lat', 'lon', 'height', 'name']):
                    print(f"  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                if not (-90 <= station['lat'] <= 90):
                    print(f"  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —à–∏—Ä–æ—Ç–∞ —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}: {station['lat']}")
                    continue
                
                if not (-180 <= station['lon'] <= 180):
                    print(f"  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞ —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}: {station['lon']}")
                    continue
                
                # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞–Ω—Ü–∏–∏ –≤ XYZ
                station_lat_rad = np.radians(station['lat'])
                station_lon_rad = np.radians(station['lon'])
                station_height = station['height']
                
                # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ ECEF –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                N = RE / np.sqrt(1 - (2*0.003353 - 0.003353**2) * np.sin(station_lat_rad)**2)
                station_xyz = (
                    (N + station_height) * np.cos(station_lat_rad) * np.cos(station_lon_rad),
                    (N + station_height) * np.cos(station_lat_rad) * np.sin(station_lon_rad),
                    (N * (1 - 0.003353**2) + station_height) * np.sin(station_lat_rad)
                )
                
                print(f"  üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞–Ω—Ü–∏–∏: {station['lat']:.4f}¬∞, {station['lon']:.4f}¬∞, {station_height}–º")
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–ª–µ–≤–µ–π—à–Ω/–∞–∑–∏–º—É—Ç –¥–ª—è –≤—Å–µ—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤
                try:
                    sats_elaz = get_sat_elevation_azimuth(station_xyz, sats_xyz)
                    if not sats_elaz:
                        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–≥–ª—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}")
                        continue
                    print(f"  üìê –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã —É–≥–ª—ã –¥–ª—è {len(sats_elaz)} —Å–ø—É—Ç–Ω–∏–∫–æ–≤")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É–≥–ª–æ–≤ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}: {e}")
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SIP —Ç–æ—á–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤
                try:
                    sat_sips = get_sat_sips((station['lat'], station['lon']), sats_elaz)
                    if not sat_sips:
                        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å SIP —Ç–æ—á–∫–∏ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}")
                        continue
                    print(f"  üéØ –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã SIP —Ç–æ—á–∫–∏ –¥–ª—è {len(sat_sips)} —Å–ø—É—Ç–Ω–∏–∫–æ–≤")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ SIP —Ç–æ—á–µ–∫ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}: {e}")
                    continue
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º SIP —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É
                try:
                    filtered_sips = filter_sips_by_polygon(sat_sips, polygon_points, times)
                    print(f"  üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}: {e}")
                    continue
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
                station_intersections = 0
                trajectory_info = {}
                
                for sat, trajectory in filtered_sips.items():
                    if trajectory and len(trajectory) > 0:
                        station_intersections += len(trajectory)
                        trajectory_info[sat] = {
                            'points_count': len(trajectory),
                            'trajectory': trajectory
                        }
                
                if station_intersections > 0:
                    print(f"  ‚úÖ –°—Ç–∞–Ω—Ü–∏—è {station_code.upper()}: {len(trajectory_info)} —Å–ø—É—Ç–Ω–∏–∫–æ–≤, {station_intersections} –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
                    try:
                        for sat, info in trajectory_info.items():
                            for i, point in enumerate(info['trajectory']):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–∫–∏
                                if not isinstance(point, dict) or 'lat' not in point or 'lon' not in point:
                                    continue
                                
                                # –ü–æ–ª—É—á–∞–µ–º —É–≥–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                                elevation = float(sats_elaz[sat][i, 0]) if sat in sats_elaz and i < len(sats_elaz[sat]) else 0.0
                                azimuth = float(sats_elaz[sat][i, 1]) if sat in sats_elaz and i < len(sats_elaz[sat]) else 0.0
                                
                                all_result_points.append({
                                    'satellite': sat,
                                    'latitude': point['lat'],
                                    'longitude': point['lon'],
                                    'time': point['time'].isoformat() if 'time' in point else times[i].isoformat() if i < len(times) else '',
                                    'elevation': elevation,
                                    'azimuth': azimuth,
                                    'station': station_code.upper(),
                                    'station_name': station['name'],
                                    'station_lat': station['lat'],
                                    'station_lon': station['lon']
                                })
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}: {e}")
                        continue
                    
                    stations_processed.append({
                        'code': station_code.upper(),
                        'name': station['name'],
                        'lat': station['lat'],
                        'lon': station['lon'],
                        'satellites_with_intersections': len(trajectory_info),
                        'intersection_points': station_intersections
                    })
                    
                    total_intersections += station_intersections
                else:
                    print(f"  ‚ö™ –°—Ç–∞–Ω—Ü–∏—è {station_code.upper()}: –Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å –ø–æ–ª–∏–≥–æ–Ω–æ–º")
                
            except Exception as e:
                print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}: {e}")
                print(f"  üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø—Ä–æ–±–ª–µ–º—ã —Å nav-—Ñ–∞–π–ª–æ–º, –æ—à–∏–±–∫–∏ —Ä–∞—Å—á–µ—Ç–∞")
                continue
        
        print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–∞–Ω—Ü–∏–π: {len(stations_processed)}")
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {total_intersections}")
        
        return {
            'points': all_result_points,
            'metadata': {
                'stations_in_polygon': len(stations_to_process),
                'stations_processed': len(stations_processed),
                'stations_with_intersections': len(stations_processed),
                'total_intersection_points': total_intersections,
                'satellites_processed': len(sats_xyz),
                'time_range': {
                    'start': start_time.isoformat(),
                    'end': end_time.isoformat()
                },
                'polygon_points_count': len(polygon_points),
                'nav_file': str(nav_file_path),
                'date': str(date),
                'year': current_year,
                'day_of_year': day_of_year,
                'source': 'nav_file + SIP_calculation + API_stations',
                'priority': 'HIGH',
                'processed_stations': stations_processed
            }
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {
            'points': [],
            'metadata': {
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}',
                'date': str(date)
            }
        }

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö ---

def parse_text_ionosphere_content(content, polygon_points, structure_type):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–æ–Ω–æ—Å—Ñ–µ—Ä—ã"""
    try:
        if isinstance(content, bytes):
            content = content.decode('utf-8')
        
        lines = content.strip().split('\n')
        points = []
        
        for line in lines:
            if line.strip() and not line.startswith('#'):
                parts = line.split()
                if len(parts) >= 3:
                    try:
                        lat = float(parts[0])
                        lon = float(parts[1])
                        tec = float(parts[2])
                        
                        if is_point_in_polygon(lat, lon, polygon_points):
                            points.append({
                                'latitude': lat,
                                'longitude': lon,
                                'tec': tec,
                                'index': 0.0,
                                'timestamp': 'real_data',
                                'source': 'simurg_text',
                                'quality': 'real'
                            })
                    except ValueError:
                        continue
        
        return {
            'points': points,
            'metadata': {
                'source': 'text_file',
                'file_type': 'txt',
                'parsed_lines': len(lines),
                'valid_points': len(points)
            }
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return None

def parse_hdf5_content(content, polygon_points, structure_type):
    """–ü–∞—Ä—Å–∏–Ω–≥ HDF5 —Ñ–∞–π–ª–æ–≤"""
    try:
        import tempfile
        import h5py
        
        with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
            tmp_file.write(content)
            tmp_file.flush()
            
            points = []
            with h5py.File(tmp_file.name, 'r') as f:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
                if 'latitude' in f and 'longitude' in f and 'tec' in f:
                    lats = f['latitude'][:]
                    lons = f['longitude'][:]
                    tecs = f['tec'][:]
                    
                    for lat, lon, tec in zip(lats, lons, tecs):
                        if is_point_in_polygon(lat, lon, polygon_points):
                            points.append({
                                'latitude': float(lat),
                                'longitude': float(lon),
                                'tec': float(tec),
                                'index': 0.0,
                                'timestamp': 'real_data',
                                'source': 'simurg_hdf5',
                                'quality': 'real'
                            })
            
            return {
                'points': points,
                'metadata': {
                    'source': 'hdf5_file',
                    'file_type': 'h5',
                    'valid_points': len(points)
                }
            }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HDF5 —Ñ–∞–π–ª–∞: {e}")
        return None

def parse_rinex_content(content, polygon_points, structure_type):
    """–ü–∞—Ä—Å–∏–Ω–≥ RINEX —Ñ–∞–π–ª–æ–≤"""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è RINEX —Ñ–∞–π–ª–æ–≤
    return {
        'points': [],
        'metadata': {
            'source': 'rinex_file',
            'file_type': 'rinex',
            'note': 'RINEX parsing not implemented'
        }
    }

def parse_gim_content(content, polygon_points, structure_type):
    """–ü–∞—Ä—Å–∏–Ω–≥ GIM —Ñ–∞–π–ª–æ–≤"""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è GIM —Ñ–∞–π–ª–æ–≤
    return {
        'points': [],
        'metadata': {
            'source': 'gim_file',
            'file_type': 'gim',
            'note': 'GIM parsing not implemented'
        }
    }

def parse_tec_dat_file(content, polygon_points, structure_type):
    """–ü–∞—Ä—Å–∏–Ω–≥ .dat —Ñ–∞–π–ª–æ–≤ —Å TEC –¥–∞–Ω–Ω—ã–º–∏"""
    return parse_text_ionosphere_content(content, polygon_points, structure_type)

def parse_gim_file(gim_path):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ GIM (Global Ionosphere Map) —Ñ–∞–π–ª–∞
    
    Args:
        gim_path: str - –ø—É—Ç—å –∫ GIM —Ñ–∞–π–ª—É
    
    Returns:
        dict - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–æ–Ω–æ—Å—Ñ–µ—Ä—ã
    """
    # –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ parse_gim_file_content –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–æ–≤
    logger.warning("parse_gim_file —É—Å—Ç–∞—Ä–µ–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ parse_gim_file_content")
    return None

def parse_text_ionosphere_file(file_path):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–æ–Ω–æ—Å—Ñ–µ—Ä—ã
    
    Args:
        file_path: str - –ø—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
    
    Returns:
        dict - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–æ–Ω–æ—Å—Ñ–µ—Ä—ã
    """
    # –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ parse_text_ionosphere_content –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–æ–≤
    logger.warning("parse_text_ionosphere_file —É—Å—Ç–∞—Ä–µ–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ parse_text_ionosphere_content")
    return None

def filter_data_by_polygon(data, polygon_points):
    """
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–æ–Ω–æ—Å—Ñ–µ—Ä—ã –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É
    
    Args:
        data: dict - –¥–∞–Ω–Ω—ã–µ –∏–æ–Ω–æ—Å—Ñ–µ—Ä—ã
        polygon_points: list - —Ç–æ—á–∫–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
    
    Returns:
        dict - –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    if not data or not polygon_points or len(polygon_points) < 3:
        return data
    
    filtered_data = {
        'points': [],
        'metadata': data.get('metadata', {})
    }
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
    for point in data.get('points', []):
        lat = point.get('latitude', 0)
        lon = point.get('longitude', 0)
        if is_point_in_polygon(lat, lon, polygon_points):
            filtered_data['points'].append(point)
    
    logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_data['points'])} —Ç–æ—á–µ–∫ –∏–∑ {len(data.get('points', []))} –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É")
    return filtered_data 

def is_point_in_polygon(lat, lon, polygon):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º ray casting
    
    Args:
        lat (float): –®–∏—Ä–æ—Ç–∞ —Ç–æ—á–∫–∏
        lon (float): –î–æ–ª–≥–æ—Ç–∞ —Ç–æ—á–∫–∏  
        polygon (list): –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –ø–æ–ª–∏–≥–æ–Ω–∞ [(lat1, lon1), (lat2, lon2), ...]
    
    Returns:
        bool: True –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
    """
    if len(polygon) < 3:
        return False
    
    x, y = lon, lat
    n = len(polygon)
    inside = False
    
    j = n - 1
    for i in range(n):
        xi, yi = polygon[i][1], polygon[i][0]  # lon, lat
        xj, yj = polygon[j][1], polygon[j][0]  # lon, lat
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ª—É—á–∞ —Å —Ä–µ–±—Ä–æ–º –ø–æ–ª–∏–≥–æ–Ω–∞
        if ((yi > y) != (yj > y)) and (x < (xj - xi) * (y - yi) / (yj - yi) + xi):
            inside = not inside
        j = i
    
    return inside

def filter_sips_by_polygon(sat_sips, polygon_coords, times):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç SIP —Ç–æ—á–∫–∏ –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É.
    
    Args:
        sat_sips: —Å–ª–æ–≤–∞—Ä—å SIP –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø—É—Ç–Ω–∏–∫–∞
        polygon_coords: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞ [(lat, lon), ...]
        times: —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
    
    Returns:
        dict: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å–ø—É—Ç–Ω–∏–∫–æ–≤
    """
    filtered_trajectories = {}
    
    for sat, sips in sat_sips.items():
        trajectory = []
        
        for i, sip in enumerate(sips):
            lat, lon = sip[0], sip[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
            if is_point_in_polygon(lat, lon, polygon_coords):
                time_obj = times[i] if i < len(times) else None
                trajectory.append({
                    'lat': lat,
                    'lon': lon,
                    'time': time_obj
                })
        
        if trajectory:
            filtered_trajectories[sat] = trajectory
    
    return filtered_trajectories 

def process_station_sips(station_code, date, polygon_points):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é - –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ SIP —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ –ø–æ–ª–∏–≥–æ–Ω
    
    Args:
        station_code (str): –ö–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ERKG')
        date (datetime.date): –î–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        polygon_points (list): –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –ø–æ–ª–∏–≥–æ–Ω–∞ [(lat, lon), ...]
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å SIP —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º–∏ –∏–ª–∏ –æ—à–∏–±–∫–æ–π
    """
    import tempfile
    from datetime import datetime, timedelta
    
    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()} –¥–ª—è –¥–∞—Ç—ã {date}")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ API
        print(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}...")
        try:
            station_url = f"https://api.simurg.space/sites/{station_code.lower()}"
            station_response = requests.get(station_url, timeout=10)
            station_response.raise_for_status()
            
            station_data = station_response.json()
            
            if 'location' not in station_data or 'lat' not in station_data['location'] or 'lon' not in station_data['location']:
                return {
                    'success': False,
                    'error': f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã',
                    'station': station_code.upper()
                }
            
            station_info = {
                'lat': float(station_data['location']['lat']),
                'lon': float(station_data['location']['lon']),
                'name': station_code.upper(),
                'height': float(station_data['location'].get('height', 0.0))
            }
            
            print(f"‚úÖ –°—Ç–∞–Ω—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {station_info['name']} ({station_info['lat']:.4f}¬∞, {station_info['lon']:.4f}¬∞, {station_info['height']:.1f}–º)")
            
        except requests.exceptions.RequestException:
            return {
                'success': False,
                'error': f'–°—Ç–∞–Ω—Ü–∏—è {station_code.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API',
                'station': station_code.upper()
            }
        except Exception as e:
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}: {str(e)}',
                'station': station_code.upper()
            }
        
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
        print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è {date}...")
        with tempfile.TemporaryDirectory() as temp_dir:
            try:
                nav_file_path = load_nav_file(datetime.combine(date, datetime.min.time()), temp_dir)
                print(f"‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {nav_file_path}")
            except Exception as e:
                return {
                    'success': False,
                    'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å nav-—Ñ–∞–π–ª –¥–ª—è {date}: {str(e)}',
                    'station': station_code.upper(),
                    'date': str(date)
                }
            
            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–≤–µ—Å—å –¥–µ–Ω—å)
            start_time = datetime.combine(date, datetime.min.time())
            end_time = datetime.combine(date, datetime.max.time().replace(microsecond=0))
            
            print(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {start_time} - {end_time}")
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –∏–∑ nav-—Ñ–∞–π–ª–∞
            print(f"üõ∞Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –∏–∑ nav-—Ñ–∞–π–ª–∞...")
            sats_xyz, times = get_sat_xyz(nav_file_path, start_time, end_time, GNSS_SATS, TIME_STEP_SECONDS)
            
            if not sats_xyz:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –∏–∑ nav-—Ñ–∞–π–ª–∞',
                    'station': station_code.upper(),
                    'date': str(date)
                }
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {len(sats_xyz)} —Å–ø—É—Ç–Ω–∏–∫–æ–≤")
            
            # 5. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞–Ω—Ü–∏–∏ –≤ XYZ (ECEF)
            station_lat_rad = np.radians(station_info['lat'])
            station_lon_rad = np.radians(station_info['lon'])
            station_height = station_info['height']
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ ECEF –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            N = RE / np.sqrt(1 - (2*0.003353 - 0.003353**2) * np.sin(station_lat_rad)**2)
            station_xyz = (
                (N + station_height) * np.cos(station_lat_rad) * np.cos(station_lon_rad),
                (N + station_height) * np.cos(station_lat_rad) * np.sin(station_lon_rad),
                (N * (1 - 0.003353**2) + station_height) * np.sin(station_lat_rad)
            )
            
            print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞–Ω—Ü–∏–∏ XYZ: ({station_xyz[0]:.0f}, {station_xyz[1]:.0f}, {station_xyz[2]:.0f})")
            
            # 6. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–ª–µ–≤–µ–π—à–Ω/–∞–∑–∏–º—É—Ç –¥–ª—è –≤—Å–µ—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤
            print(f"üìê –†–∞—Å—á–µ—Ç —É–≥–ª–æ–≤ —ç–ª–µ–≤–µ–π—à–Ω/–∞–∑–∏–º—É—Ç –¥–ª—è –≤—Å–µ—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤...")
            sats_elaz = get_sat_elevation_azimuth(station_xyz, sats_xyz)
            
            if not sats_elaz:
                return {
                    'success': False,
                    'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–≥–ª—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}',
                    'station': station_code.upper()
                }
            
            print(f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã —É–≥–ª—ã –¥–ª—è {len(sats_elaz)} —Å–ø—É—Ç–Ω–∏–∫–æ–≤")
            
            # 7. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SIP —Ç–æ—á–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤
            print(f"üéØ –†–∞—Å—á–µ—Ç SIP —Ç–æ—á–µ–∫ –¥–ª—è –≤—Å–µ—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤...")
            sat_sips = get_sat_sips((station_info['lat'], station_info['lon']), sats_elaz)
            
            if not sat_sips:
                return {
                    'success': False,
                    'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å SIP —Ç–æ—á–∫–∏ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}',
                    'station': station_code.upper()
                }
            
            print(f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã SIP —Ç–æ—á–∫–∏ –¥–ª—è {len(sat_sips)} —Å–ø—É—Ç–Ω–∏–∫–æ–≤")
            
            # 8. –§–∏–ª—å—Ç—Ä—É–µ–º SIP —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É
            print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è SIP —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É...")
            filtered_sips = filter_sips_by_polygon(sat_sips, polygon_points, times)
            
            # 9. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_intersections = 0
            satellites_with_intersections = []
            all_trajectory_points = []
            
            for sat, trajectory in filtered_sips.items():
                if trajectory and len(trajectory) > 0:
                    total_intersections += len(trajectory)
                    satellites_with_intersections.append(sat)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                    for i, point in enumerate(trajectory):
                        # –ü–æ–ª—É—á–∞–µ–º —É–≥–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                        elevation = float(sats_elaz[sat][i, 0]) if sat in sats_elaz and i < len(sats_elaz[sat]) else 0.0
                        azimuth = float(sats_elaz[sat][i, 1]) if sat in sats_elaz and i < len(sats_elaz[sat]) else 0.0
                        
                        all_trajectory_points.append({
                            'satellite': sat,
                            'latitude': point['lat'],
                            'longitude': point['lon'],
                            'time': point['time'].isoformat() if 'time' in point else times[i].isoformat() if i < len(times) else '',
                            'elevation': elevation,
                            'azimuth': azimuth,
                            'station': station_code.upper(),
                            'station_name': station_info['name'],
                            'station_lat': station_info['lat'],
                            'station_lon': station_info['lon']
                        })
            
            print(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìä –°–ø—É—Ç–Ω–∏–∫–æ–≤ —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º–∏: {len(satellites_with_intersections)} –∏–∑ {len(sats_xyz)}")
            print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {total_intersections}")
            
            if satellites_with_intersections:
                print(f"üõ∞Ô∏è –°–ø—É—Ç–Ω–∏–∫–∏ —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º–∏: {', '.join(satellites_with_intersections[:10])}")
                if len(satellites_with_intersections) > 10:
                    print(f"   ... –∏ –µ—â–µ {len(satellites_with_intersections) - 10} —Å–ø—É—Ç–Ω–∏–∫–æ–≤")
            
            return {
                'success': True,
                'station': {
                    'code': station_code.upper(),
                    'name': station_info['name'],
                    'lat': station_info['lat'],
                    'lon': station_info['lon'],
                    'height': station_info['height']
                },
                'date': str(date),
                'satellites_total': len(sats_xyz),
                'satellites_with_intersections': len(satellites_with_intersections),
                'intersection_points': total_intersections,
                'polygon_points_count': len(polygon_points),
                'trajectory_points': all_trajectory_points,
                'satellites_list': satellites_with_intersections,
                'time_range': {
                    'start': start_time.isoformat(),
                    'end': end_time.isoformat()
                },
                'metadata': {
                    'nav_file': str(nav_file_path),
                    'source': 'nav_file + SIP_calculation',
                    'processing_type': 'single_station'
                }
            }
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏ {station_code.upper()}: {e}")
        return {
            'success': False,
            'error': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}',
            'station': station_code.upper()
        } 